import React, { useState, useEffect } from "react";
import { categoryService, authService } from "../../services";
import AdminLayout from "../../components/AdminLayout/AdminLayout";
import "./AdminCategories.css";

function AdminCategories({
  currentPage,
  onNavigateToHome,
  onNavigateToOrders,
  onNavigateToProducts,
  onNavigateToUsers,
  onNavigateToRoles,
  onNavigateToCategories,
  onLogout,
}) {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [notification, setNotification] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [editingCategory, setEditingCategory] = useState(null);
  const [formData, setFormData] = useState({
    categoryName: "",
  });
  const [fieldErrors, setFieldErrors] = useState({});

  // Delete confirmation modal state
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [categoryToDelete, setCategoryToDelete] = useState(null);

  useEffect(() => {
    const currentUser = authService.getCurrentUser();
    if (!currentUser || currentUser.role !== "Admin") {
      setTimeout(() => {
        onNavigateToHome();
      }, 1000);
      return;
    }

    fetchData();
  }, [onNavigateToHome]);

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);
      const categoriesData = await categoryService.getAllCategories();
      // Filter out categories without proper structure and remove orchids field
      const cleanCategories = categoriesData
        .filter((cat) => cat.categoryId && cat.categoryName)
        .map((cat) => ({
          categoryId: cat.categoryId,
          categoryName: cat.categoryName,
        }));
      setCategories(cleanCategories);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const showNotification = (message) => {
    setNotification(message);
    setTimeout(() => setNotification(""), 3000);
  };

  // Validation functions
  const validateField = (name, value) => {
    const errors = {};

    switch (name) {
      case "categoryName":
        if (!value.trim()) {
          errors.categoryName = "T√™n danh m·ª•c l√† b·∫Øt bu·ªôc";
        } else if (value.trim().length < 2) {
          errors.categoryName = "T√™n danh m·ª•c ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±";
        } else if (value.trim().length > 100) {
          errors.categoryName = "T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±";
        } else if (!/^[a-zA-Z√Ä-·ªπ\s]+$/.test(value.trim())) {
          errors.categoryName =
            "T√™n danh m·ª•c ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng";
        }
        break;

      default:
        break;
    }

    return errors;
  };

  const validateForm = () => {
    const errors = {};

    // Validate all fields
    Object.keys(formData).forEach((field) => {
      const fieldValidationErrors = validateField(field, formData[field]);
      Object.assign(errors, fieldValidationErrors);
    });

    return errors;
  };

  const filteredCategories = categories.filter((category) =>
    category.categoryName.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleFormChange = (e) => {
    const { name, value } = e.target;

    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // Real-time validation
    const fieldValidationErrors = validateField(name, value);
    setFieldErrors((prev) => ({
      ...prev,
      ...fieldValidationErrors,
      [name]: fieldValidationErrors[name] || undefined, // Remove error if field is valid
    }));
  };

  const openModal = (category = null) => {
    if (category) {
      setEditingCategory(category);
      setFormData({
        categoryName: category.categoryName,
      });
    } else {
      setEditingCategory(null);
      setFormData({
        categoryName: "",
      });
    }
    setFieldErrors({}); // Clear all validation errors
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setEditingCategory(null);
    setFormData({
      categoryName: "",
    });
    setFieldErrors({}); // Clear all validation errors
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Validate entire form
    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setFieldErrors(errors);
      showNotification("‚ùå Vui l√≤ng s·ª≠a c√°c l·ªói trong form!");
      return;
    }

    try {
      setLoading(true);
      setFieldErrors({});

      const categoryData = {
        categoryName: formData.categoryName.trim(),
      };

      if (editingCategory) {
        await categoryService.updateCategory(
          editingCategory.categoryId,
          categoryData
        );
        showNotification("‚úÖ C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng!");
      } else {
        await categoryService.createCategory(categoryData);
        showNotification("‚úÖ Th√™m danh m·ª•c th√†nh c√¥ng!");
      }

      closeModal();
      await fetchData();
    } catch (error) {
      showNotification(`‚ùå L·ªói: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = (category) => {
    setCategoryToDelete(category);
    setShowDeleteModal(true);
  };

  const confirmDelete = async () => {
    if (!categoryToDelete) return;

    try {
      setLoading(true);
      await categoryService.deleteCategory(categoryToDelete.categoryId);
      showNotification("‚úÖ X√≥a danh m·ª•c th√†nh c√¥ng!");
      await fetchData();
      setShowDeleteModal(false);
      setCategoryToDelete(null);
    } catch (error) {
      showNotification(`‚ùå L·ªói: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const cancelDelete = () => {
    setShowDeleteModal(false);
    setCategoryToDelete(null);
  };

  const getCategoryIcon = (categoryName) => {
    switch (categoryName.toLowerCase()) {
      case "phalaenopsis":
        return "ü¶ã";
      case "cattleya":
        return "üå∫";
      case "dendrobium":
        return "üå∏";
      case "vanda":
        return "üíú";
      case "oncidium":
        return "üåº";
      default:
        return "üåø";
    }
  };

  const getCategoryColor = (categoryName) => {
    switch (categoryName.toLowerCase()) {
      case "phalaenopsis":
        return "category-phalaenopsis";
      case "cattleya":
        return "category-cattleya";
      case "dendrobium":
        return "category-dendrobium";
      case "vanda":
        return "category-vanda";
      case "oncidium":
        return "category-oncidium";
      default:
        return "category-default";
    }
  };

  const currentUser = authService.getCurrentUser();
  if (!currentUser || currentUser.role !== "Admin") {
    return (
      <div className="admin-access-denied">
        <div className="access-denied-content">
          <div className="access-denied-icon">üö´</div>
          <h2>Truy c·∫≠p b·ªã t·ª´ ch·ªëi</h2>
          <p>
            B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y. Ch·ªâ Admin m·ªõi c√≥ th·ªÉ xem.
          </p>
          <button className="back-home-btn" onClick={onNavigateToHome}>
            V·ªÅ trang ch·ªß
          </button>
        </div>
      </div>
    );
  }

  return (
    <AdminLayout
      currentPage={currentPage}
      onNavigateToHome={onNavigateToHome}
      onNavigateToOrders={onNavigateToOrders}
      onNavigateToProducts={onNavigateToProducts}
      onNavigateToUsers={onNavigateToUsers}
      onNavigateToRoles={onNavigateToRoles}
      onNavigateToCategories={onNavigateToCategories}
      onLogout={onLogout}
    >
      <div className="admin-categories">
        <div className="admin-categories-header">
          <div className="header-left">
            <h1>üè∑Ô∏è Qu·∫£n l√Ω danh m·ª•c</h1>
            <p>Qu·∫£n l√Ω to√†n b·ªô danh m·ª•c hoa lan trong h·ªá th·ªëng</p>
          </div>
          <button className="btn-primary" onClick={() => openModal()}>
            ‚ûï Th√™m danh m·ª•c
          </button>
        </div>

        <div className="stats-grid">
          <div className="stat-card">
            <div className="stat-icon">üè∑Ô∏è</div>
            <div className="stat-content">
              <div className="stat-number">{categories.length}</div>
              <div className="stat-label">T·ªïng danh m·ª•c</div>
            </div>
          </div>
          <div className="stat-card">
            <div className="stat-icon">ü¶ã</div>
            <div className="stat-content">
              <div className="stat-number">
                {
                  categories.filter(
                    (c) => c.categoryName.toLowerCase() === "phalaenopsis"
                  ).length
                }
              </div>
              <div className="stat-label">Phalaenopsis</div>
            </div>
          </div>
          <div className="stat-card">
            <div className="stat-icon">üå∫</div>
            <div className="stat-content">
              <div className="stat-number">
                {
                  categories.filter(
                    (c) => c.categoryName.toLowerCase() === "cattleya"
                  ).length
                }
              </div>
              <div className="stat-label">Cattleya</div>
            </div>
          </div>
          <div className="stat-card">
            <div className="stat-icon">üå∏</div>
            <div className="stat-content">
              <div className="stat-number">
                {
                  categories.filter(
                    (c) => c.categoryName.toLowerCase() === "dendrobium"
                  ).length
                }
              </div>
              <div className="stat-label">Dendrobium</div>
            </div>
          </div>
        </div>

        <div className="filters-section">
          <div className="search-box">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm theo t√™n danh m·ª•c..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        {notification && <div className="notification">{notification}</div>}

        {loading ? (
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
          </div>
        ) : error ? (
          <div className="error-container">
            <p>‚ùå L·ªói: {error}</p>
            <button onClick={fetchData}>Th·ª≠ l·∫°i</button>
          </div>
        ) : (
          <div className="categories-table">
            <div className="table-header">
              <div className="col-id">ID</div>
              <div className="col-name">T√™n danh m·ª•c</div>
              <div className="col-icon">Icon</div>
              <div className="col-description">M√¥ t·∫£</div>
              <div className="col-actions">Thao t√°c</div>
            </div>

            {filteredCategories.length === 0 ? (
              <div className="empty-state">
                <p>Kh√¥ng t√¨m th·∫•y danh m·ª•c n√†o</p>
              </div>
            ) : (
              filteredCategories.map((category) => (
                <div key={category.categoryId} className="table-row">
                  <div className="col-id">#{category.categoryId}</div>
                  <div className="col-name">
                    <span
                      className={`category-badge ${getCategoryColor(
                        category.categoryName
                      )}`}
                    >
                      {category.categoryName}
                    </span>
                  </div>
                  <div className="col-icon">
                    <span className="category-icon">
                      {getCategoryIcon(category.categoryName)}
                    </span>
                  </div>
                  <div className="col-description">
                    <span className="category-description">
                      Danh m·ª•c hoa lan {category.categoryName.toLowerCase()}
                    </span>
                  </div>
                  <div className="col-actions">
                    <button
                      className="btn-edit"
                      onClick={() => openModal(category)}
                    >
                      ‚úèÔ∏è S·ª≠a
                    </button>
                    <button
                      className="btn-delete"
                      onClick={() => handleDelete(category)}
                    >
                      üóëÔ∏è X√≥a
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        )}

        {/* Add/Edit Category Modal */}
        {showModal && (
          <div className="category-modal-overlay">
            <div className="category-modal">
              <div className="category-modal-header">
                <div className="modal-title-section">
                  <div className="modal-icon">üè∑Ô∏è</div>
                  <div className="modal-title-text">
                    <h2>
                      {editingCategory
                        ? "Ch·ªânh s·ª≠a danh m·ª•c"
                        : "Th√™m danh m·ª•c m·ªõi"}
                    </h2>
                    <p>
                      {editingCategory
                        ? "C·∫≠p nh·∫≠t th√¥ng tin danh m·ª•c hoa lan"
                        : "T·∫°o danh m·ª•c m·ªõi cho h·ªá th·ªëng"}
                    </p>
                  </div>
                </div>
                <button className="modal-close" onClick={closeModal}>
                  ‚úï
                </button>
              </div>

              <div className="category-modal-body">
                <form onSubmit={handleSubmit} className="category-form">
                  <div className="category-form-grid">
                    <div className="form-column">
                      <div className="form-card">
                        <div className="card-header">
                          <h3>üè∑Ô∏è Th√¥ng tin danh m·ª•c</h3>
                          <p>Nh·∫≠p t√™n cho danh m·ª•c hoa lan</p>
                        </div>
                        <div className="card-content">
                          <div className="form-group">
                            <label>T√™n danh m·ª•c *</label>
                            <input
                              type="text"
                              name="categoryName"
                              value={formData.categoryName}
                              onChange={handleFormChange}
                              required
                              placeholder="Nh·∫≠p t√™n danh m·ª•c (VD: Cattleya, Dendrobium...)"
                              className={
                                fieldErrors.categoryName ? "error" : ""
                              }
                            />
                            {fieldErrors.categoryName && (
                              <span className="field-error">
                                ‚ùå {fieldErrors.categoryName}
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="form-column">
                      <div className="form-card">
                        <div className="card-header">
                          <h3>üå∫ V√≠ d·ª• danh m·ª•c</h3>
                          <p>C√°c lo·∫°i hoa lan ph·ªï bi·∫øn</p>
                        </div>
                        <div className="card-content">
                          <div className="category-examples">
                            <div className="category-example">
                              <span className="example-icon">ü¶ã</span>
                              <div>
                                <strong>Phalaenopsis</strong>
                                <p>Hoa lan b∆∞·ªõm</p>
                              </div>
                            </div>
                            <div className="category-example">
                              <span className="example-icon">üå∫</span>
                              <div>
                                <strong>Cattleya</strong>
                                <p>Hoa lan qu√Ω t·ªôc</p>
                              </div>
                            </div>
                            <div className="category-example">
                              <span className="example-icon">üå∏</span>
                              <div>
                                <strong>Dendrobium</strong>
                                <p>Hoa lan c√¢y s·ªëng</p>
                              </div>
                            </div>
                            <div className="category-example">
                              <span className="example-icon">üíú</span>
                              <div>
                                <strong>Vanda</strong>
                                <p>Hoa lan m√†u t√≠m</p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </form>
              </div>

              <div className="category-modal-footer">
                <button
                  type="button"
                  className="btn-cancel"
                  onClick={closeModal}
                  disabled={loading}
                >
                  H·ªßy b·ªè
                </button>
                <button
                  type="submit"
                  className="btn-save"
                  disabled={loading}
                  onClick={handleSubmit}
                >
                  {loading ? (
                    <>
                      <span className="loading-spinner"></span>
                      ƒêang x·ª≠ l√Ω...
                    </>
                  ) : editingCategory ? (
                    <>
                      <span className="btn-icon">üíæ</span>
                      C·∫≠p nh·∫≠t danh m·ª•c
                    </>
                  ) : (
                    <>
                      <span className="btn-icon">‚ûï</span>
                      Th√™m danh m·ª•c
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Delete Confirmation Modal */}
        {showDeleteModal && categoryToDelete && (
          <div className="delete-modal-overlay">
            <div className="delete-modal">
              <div className="delete-modal-header">
                <div className="delete-icon">üóëÔ∏è</div>
                <h3>X√°c nh·∫≠n x√≥a danh m·ª•c</h3>
              </div>

              <div className="delete-modal-body">
                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c n√†y kh√¥ng?</p>
                <div className="category-info-preview">
                  <div className="preview-item">
                    <span className="preview-label">üè∑Ô∏è T√™n:</span>
                    <span className="preview-value">
                      {categoryToDelete.categoryName}
                    </span>
                  </div>
                  <div className="preview-item">
                    <span className="preview-label">üî¢ ID:</span>
                    <span className="preview-value">
                      #{categoryToDelete.categoryId}
                    </span>
                  </div>
                  <div className="preview-item">
                    <span className="preview-label">üìä Icon:</span>
                    <span className="preview-value">
                      {getCategoryIcon(categoryToDelete.categoryName)}
                    </span>
                  </div>
                </div>
                <div className="warning-message">
                  ‚ö†Ô∏è <strong>C·∫£nh b√°o:</strong> H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n
                  t√°c!
                </div>
              </div>

              <div className="delete-modal-footer">
                <button
                  className="btn-cancel-delete"
                  onClick={cancelDelete}
                  disabled={loading}
                >
                  <span className="btn-icon">‚úï</span>
                  H·ªßy
                </button>
                <button
                  className="btn-confirm-delete"
                  onClick={confirmDelete}
                  disabled={loading}
                >
                  {loading ? (
                    <>
                      <span className="loading-spinner"></span>
                      X√≥a...
                    </>
                  ) : (
                    <>
                      <span className="btn-icon">üóëÔ∏è</span>
                      X√≥a
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
}

export default AdminCategories;
