import React, { useState, useRef, useEffect } from "react";
import "./ChatBot.css";

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Xin ch√†o! üëã T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Orchid Shop. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c lo√†i hoa lan v√† t∆∞ v·∫•n mua h√†ng. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ kh√¥ng?",
      sender: "bot",
      timestamp: new Date().toLocaleTimeString("vi-VN", {
        hour: "2-digit",
        minute: "2-digit",
      }),
    },
  ]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const toggleChat = () => {
    setIsOpen(!isOpen);
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!inputMessage.trim()) return;

    // L∆∞u tin nh·∫Øn tr∆∞·ªõc khi clear input
    const messageText = inputMessage.trim();

    // Add user message
    const userMessage = {
      id: Date.now(),
      text: messageText,
      sender: "user",
      timestamp: new Date().toLocaleTimeString("vi-VN", {
        hour: "2-digit",
        minute: "2-digit",
      }),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputMessage("");
    setIsLoading(true);

    // TODO: Replace with Gemini API call
    // For now, simulate bot response
    setTimeout(() => {
      const botResponse = {
        id: Date.now() + 1,
        text: generateBotResponse(messageText), // S·ª≠ d·ª•ng messageText thay v√¨ inputMessage
        sender: "bot",
        timestamp: new Date().toLocaleTimeString("vi-VN", {
          hour: "2-digit",
          minute: "2-digit",
        }),
      };
      setMessages((prev) => [...prev, botResponse]);
      setIsLoading(false);
    }, 1500);
  };

  // Temporary function to simulate bot responses - will be replaced with Gemini API
  const generateBotResponse = (userInput) => {
    const input = userInput.toLowerCase();

    if (input.includes("gi√°") || input.includes("bao nhi√™u")) {
      return "üí∞ Gi√° c√°c lo√†i hoa lan c·ªßa ch√∫ng t√¥i dao ƒë·ªông t·ª´ 200,000 - 2,000,000 VNƒê t√πy theo lo·∫°i v√† k√≠ch th∆∞·ªõc. B·∫°n quan t√¢m ƒë·∫øn lo·∫°i hoa lan n√†o c·ª• th·ªÉ kh√¥ng?";
    } else if (input.includes("chƒÉm s√≥c") || input.includes("tr·ªìng")) {
      return "üå± Hoa lan c·∫ßn √°nh s√°ng gi√°n ti·∫øp, ƒë·ªô ·∫©m 60-80%, t∆∞·ªõi n∆∞·ªõc 2-3 l·∫ßn/tu·∫ßn. B·∫°n c√≥ mu·ªën t√¥i t∆∞ v·∫•n chi ti·∫øt cho lo·∫°i hoa lan c·ª• th·ªÉ kh√¥ng?";
    } else if (input.includes("giao h√†ng") || input.includes("ship")) {
      return "üöö Ch√∫ng t√¥i giao h√†ng to√†n qu·ªëc trong 2-3 ng√†y. Mi·ªÖn ph√≠ ship v·ªõi ƒë∆°n h√†ng tr√™n 500,000 VNƒê trong n·ªôi th√†nh TP.HCM.";
    } else if (input.includes("lo·∫°i") || input.includes("ph√¢n lo·∫°i")) {
      return "üå∫ Ch√∫ng t√¥i c√≥ 4 lo·∫°i ch√≠nh: Lan Dendrobium, Lan H·ªì ƒêi·ªáp, Lan Cattleya, v√† Lan Oncidium. M·ªói lo·∫°i ƒë·ªÅu c√≥ v·∫ª ƒë·∫πp ri√™ng bi·ªát!";
    } else {
      return "üå∏ C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! T√¥i s·∫Ω t√¨m hi·ªÉu th√¥ng tin n√†y cho b·∫°n. B·∫°n c√≥ th·ªÉ li√™n h·ªá hotline (028) 3123 4567 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n nh√©!";
    }
  };

  const quickQuestions = [
    "Gi√° hoa lan nh∆∞ th·∫ø n√†o?",
    "C√°ch chƒÉm s√≥c hoa lan",
    "C√≥ nh·ªØng lo·∫°i n√†o?",
    "Ch√≠nh s√°ch giao h√†ng",
  ];

  const handleQuickQuestion = (question) => {
    setInputMessage(question);
  };

  return (
    <div className="chatbot-container">
      {/* Chat Window */}
      {isOpen && (
        <div className="chat-window">
          <div className="chat-header">
            <div className="chat-title">
              <div className="bot-avatar">ü§ñ</div>
              <div className="chat-info">
                <h4>Orchid Assistant</h4>
                <span className="status">ƒêang ho·∫°t ƒë·ªông</span>
              </div>
            </div>
            <button className="close-btn" onClick={toggleChat}>
              ‚úï
            </button>
          </div>

          <div className="chat-messages">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`message ${
                  message.sender === "user" ? "user-message" : "bot-message"
                }`}
              >
                <div className="message-content">
                  <p>{message.text}</p>
                  <span className="message-time">{message.timestamp}</span>
                </div>
              </div>
            ))}

            {isLoading && (
              <div className="message bot-message">
                <div className="message-content">
                  <div className="typing-indicator">
                    <div className="typing-dot"></div>
                    <div className="typing-dot"></div>
                    <div className="typing-dot"></div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Questions */}
          {messages.length === 1 && (
            <div className="quick-questions">
              <p className="quick-title">C√¢u h·ªèi th∆∞·ªùng g·∫∑p:</p>
              <div className="quick-buttons">
                {quickQuestions.map((question, index) => (
                  <button
                    key={index}
                    className="quick-btn"
                    onClick={() => handleQuickQuestion(question)}
                  >
                    {question}
                  </button>
                ))}
              </div>
            </div>
          )}

          <form className="chat-input-form" onSubmit={handleSendMessage}>
            <div className="input-wrapper">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                className="chat-input"
                disabled={isLoading}
              />
              <button
                type="submit"
                className="send-btn"
                disabled={!inputMessage.trim() || isLoading}
              >
                <span className="send-icon">üì§</span>
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Floating Button */}
      <button
        className={`chatbot-toggle ${isOpen ? "active" : ""}`}
        onClick={toggleChat}
        aria-label="Chat v·ªõi tr·ª£ l√Ω ·∫£o"
        style={{
          position: "fixed",
          bottom: "20px",
          right: "20px",
          zIndex: 9999,
          width: "60px",
          height: "60px",
          borderRadius: "50%",
          border: "none",
          cursor: "pointer",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          background: isOpen
            ? "#dc3545"
            : "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
          color: "white",
          fontSize: "1.5rem",
          boxShadow: "0 8px 25px rgba(102, 126, 234, 0.4)",
        }}
      >
        {isOpen ? (
          <span className="close-icon">‚úï</span>
        ) : (
          <>
            <span className="chat-icon">üí¨</span>
            <div className="notification-dot"></div>
          </>
        )}
      </button>
    </div>
  );
};

export default ChatBot;
